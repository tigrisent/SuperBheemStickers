plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.samplestickerapp'
    compileSdk 35

    defaultConfig {
        applicationId "com.greengold.stickers.superbheemstickers"
        minSdk 21
        targetSdk 35
        versionCode 178
        versionName "1.7.8"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Define contentProviderAuthority inside the defaultConfig block
        def contentProviderAuthority = "${applicationId}.stickercontentprovider"

        // Use manifestPlaceholders as a Map directly within defaultConfig
        manifestPlaceholders = [contentProviderAuthority: contentProviderAuthority]

        // Use buildConfigField to create the BuildConfig field
        buildConfigField "String", "CONTENT_PROVIDER_AUTHORITY", "\"$contentProviderAuthority\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            excludes += ['lib/*/libnative-imagetranscoder.so', 'lib/*/libnative-filters.so']
        }
    }
    androidResources {
        noCompress += "webp"
    }
}

tasks.register('checkDebug') {
    doLast {
        println 'checkDebug'
        if (android.defaultConfig.applicationId.startsWith("com.whatsapp")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.whatsapp, please change your applicationId in app/build.gradle")
        }
        checkApplicationIdInDebug()
    }
}

def checkApplicationIdInDebug() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    def ignoreApplicationIdCheck = properties.getProperty("ignoreApplicationIdCheck")
    if (ignoreApplicationIdCheck == null) {
        if (android.defaultConfig.applicationId == "com.example.samplestickerapp") {
            // throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")
        }
    } else {
        println "application id check ignored"
    }
}

tasks.register('checkRelease') {
    doLast {
        println 'checkRelease'
        if (android.defaultConfig.applicationId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
    }
}

tasks.configureEach { task ->
    println task.name
    if (task.name.contains("assembleDebug")) {
        task.dependsOn checkDebug
    }
    if (task.name.contains("assembleRelease")) {
        task.dependsOn checkRelease
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    def frescoVersion = "2.6.0"
    implementation("com.facebook.fresco:fresco:$frescoVersion") {
        exclude group: 'com.facebook.soloader'
    }
    implementation("com.facebook.soloader:soloader:0.10.5")
    implementation "com.facebook.fresco:webpsupport:$frescoVersion"
    implementation "com.facebook.fresco:animated-webp:$frescoVersion"
    implementation "com.facebook.fresco:animated-base:$frescoVersion"
}